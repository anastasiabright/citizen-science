########## First attempt ########
visNetwork(nodes, links, width="100%", height="400px", background="#eeefff",
main="BUA Citizen Science Network", submain="Sustainability and Co.",
footer= "Click on any node to see more information")
########## Second attempt ##########
# We'll start by adding new node and edge attributes to our dataframes.
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$project # Text on click
vis.nodes$label  <- vis.nodes$project # Node label
vis.nodes$size   <- vis.nodes$sdg.level # Node size
vis.nodes$borderWidth <- 2 # Node border width
vis.nodes$color.background <- c("slategrey", "tomato")[nodes$running]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- 1+links$weight/8 # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "from" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- FALSE    # should the edges be curved?
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
# We'll start by adding new node and edge attributes to our dataframes.
nodes$project = wrap_strings(nodes$project, 20)
vis.nodes <- nodes
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$project # Text on click
vis.nodes$label  <- vis.nodes$project # Node label
vis.nodes$size   <- vis.nodes$sdg.level # Node size
vis.nodes$borderWidth <- 2 # Node border width
vis.nodes$color.background <- c("slategrey", "tomato")[nodes$running]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- 1+links$weight/8 # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "from" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- FALSE    # should the edges be curved?
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
vis.nodes$title  <- c(vis.nodes$goal, vis.nodes$description) # Text on click
vis.nodes$title  <- vis.nodes$goal # Text on click
nodes$project = wrap_strings(nodes$project, 20)
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$goal # Text on click
vis.nodes$label  <- vis.nodes$id # Node label
#vis.nodes$size   <- vis.nodes$sdg.level # Node size
vis.nodes$borderWidth <- 2 # Node border width
vis.nodes$color.background <- c("slategrey", "tomato")[nodes$running]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- 1+links$weight/8 # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "from" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- FALSE    # should the edges be curved?
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
vis.nodes$title  <- vis.nodes$project.website
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
nodes$group <- nodes$name.of.engagement
visnet3 <- visNetwork(nodes, links)
View(nodes)
visnet3 <- visNetwork(nodes, links)
visnet3 <- visGroups(visnet3, groupname = "Citizen Science", shape = "square",
color = list(background = "gray", border="black"))
visnet3 <- visGroups(visnet3, groupname = "Reallabor", shape = "dot",
color = list(background = "tomato", border="black"))
visnet3 <- visGroups(visnet3, groupname = "Transdisciplinary", shape = "diamond",
color = list(background = "orange", border="black"))
visLegend(visnet3, main="Legend", position="right", ncol=1)
nodes$group <- nodes$bua_institut.type
visnet3 <- visNetwork(nodes, links)
visnet3 <- visGroups(visnet3, groupname = "Citizen Science", shape = "square",
color = list(background = "gray", border="black"))
visnet3 <- visGroups(visnet3, groupname = "Reallabor", shape = "dot",
color = list(background = "tomato", border="black"))
visnet3 <- visGroups(visnet3, groupname = "Transdisciplinary", shape = "diamond",
color = list(background = "orange", border="black"))
visLegend(visnet3, main="Legend", position="right", ncol=1)
nodes$group <- nodes$name.sdg
visnet3 <- visNetwork(nodes, links)
visnet3 <- visGroups(visnet3, groupname = "Citizen Science", shape = "square",
color = list(background = "gray", border="black"))
visnet3 <- visGroups(visnet3, groupname = "Reallabor", shape = "dot",
color = list(background = "tomato", border="black"))
visnet3 <- visGroups(visnet3, groupname = "Transdisciplinary", shape = "diamond",
color = list(background = "orange", border="black"))
visLegend(visnet3, main="Legend", position="right", ncol=1)
nodes$group <- nodes$name.of.engagement
visnet3 <- visNetwork(nodes, links)
visnet3 <- visGroups(visnet3, groupname = "Citizen Science", shape = "square",
color = list(background = "gray", border="black"))
visnet3 <- visGroups(visnet3, groupname = "Reallabor", shape = "dot",
color = list(background = "tomato", border="black"))
visnet3 <- visGroups(visnet3, groupname = "Transdisciplinary", shape = "diamond",
color = list(background = "orange", border="black"))
visLegend(visnet3, main="Legend", position="right", ncol=1)
visnet
vis.nodes$size   <- vis.nodes$bua_institut.type # Node size
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
vis.nodes$size   <- vis.nodes$running # Node size
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$goal # Text on click
#vis.nodes$title  <- vis.nodes$project.website
vis.nodes$label  <- vis.nodes$id # Node label
vis.nodes$size   <- vis.nodes$name.of.engagement # Node size
vis.nodes$borderWidth <- 2 # Node border width
vis.nodes$color.background <- c("slategrey", "tomato")[nodes$running]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- 1+links$weight/8 # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "from" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- FALSE    # should the edges be curved?
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
nodes$project = wrap_strings(nodes$project, 20)
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$goal # Text on click
#vis.nodes$title  <- vis.nodes$project.website
vis.nodes$label  <- vis.nodes$id # Node label
vis.nodes$size   <- vis.nodes$sdg.level# Node size
vis.nodes$borderWidth <- 2 # Node border width
vis.nodes$color.background <- c("slategrey", "tomato")[nodes$running]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- 1+links$weight/8 # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "from" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- FALSE    # should the edges be curved?
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
sdg_colors <- colorRampPalette(c("yellow", "blue", "green"))(length(unique(nodes$sdg.level)))
vis.nodes$color.background <- sdg_colors
vis.nodes$color.background <- sdg_colors[nodes$sdg.level]
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
sdg_colors <- colorRampPalette(c("yellow", "blue"))(length(unique(nodes$sdg.level)))
vis.nodes$color.background <- sdg_colors[nodes$sdg.level]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- 1+links$weight/8 # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "from" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- FALSE    # should the edges be curved?
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
# Assign a color from the vector to each vertex based on its "sdg" attribute
vertex_colors <- sdg_colors[as.factor(nodes$sdg.level)]
names(vertex_colors) <- nodes$sdg.level
vis.nodes$color.background <- names(vertex_colors)[nodes$sdg.level]
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links) |>
visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
#vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links)# |>
visnet
library('ndtv')
par(mar=c(0,0,0,0))
render.d3movie(net, usearrows = F, displaylabels = F, bg="#111111",
vertex.border="#ffffff", vertex.col =  net3 %v% "col",
vertex.cex = (net3 %v% "audience.size")/8,
edge.lwd = (net3 %e% "weight")/3, edge.col = '#55555599',
vertex.tooltip = paste("<b>Name:</b>", (net3 %v% 'media') , "<br>",
"<b>Type:</b>", (net3 %v% 'type.label')),
edge.tooltip = paste("<b>Edge type:</b>", (net3 %e% 'type'), "<br>",
"<b>Edge weight:</b>", (net3 %e% "weight" ) ),
launchBrowser=F, filename="Media-Network.html" )
render.d3movie(net_undir, usearrows = F, displaylabels = F, bg="#111111",
vertex.border="#ffffff", vertex.col =  net3 %v% "col",
vertex.cex = (net3 %v% "audience.size")/8,
edge.lwd = (net3 %e% "weight")/3, edge.col = '#55555599',
vertex.tooltip = paste("<b>Name:</b>", (net3 %v% 'media') , "<br>",
"<b>Type:</b>", (net3 %v% 'type.label')),
edge.tooltip = paste("<b>Edge type:</b>", (net3 %e% 'type'), "<br>",
"<b>Edge weight:</b>", (net3 %e% "weight" ) ),
launchBrowser=F, filename="Media-Network.html" )
# A shiny example
shiny::runApp(system.file("examples/graph", package="threejs"))
# A shiny example
shiny::runApp(system.file("visnet", package="threejs"))
# A shiny example
shiny::runApp(system.file("/cs", package="threejs"))
# A shiny example
shiny::runApp(system.file("/aoo.R", package="threejs"))
# A shiny example
shiny::runApp(system.file("/app.R", package="threejs"))
# A shiny example
shiny::runApp(system.file("./app.R", package="threejs"))
# A shiny example
shiny::runApp(system.file("./app", package="threejs"))
# A shiny example
shiny::runApp(system.file("./", package="threejs"))
# A shiny example
shiny::runApp(system.file("./", package="threejs"))
# A shiny example
shiny::runApp(system.file("C:/Users/iarkaeva/Documents/BIH_QUEST_Projects/cs", package="visNetwork"))
# A shiny example
shiny::runApp(system.file("~/cs", package="visNetwork"))
# A shiny example
shiny::runApp(system.file("~/shiny/", package="visNetwork"))
# A shiny example
shiny::runApp(system.file("~/shiny/app.R", package="visNetwork"))
# A shiny example
shiny::runApp(system.file("~/shiny/app.R")#, package="visNetwork"))
# A shiny example
shiny::runApp(system.file("~/shiny/app.R")) #, package="visNetwork"))
# A shiny example
shiny::runApp(system.file("~/shiny/app.R", package="visNetwork"))
rlang::last_trace()
shiny::runApp(system.file("~/shiny/app.R", package="visNetwork"))
# A shiny example
shiny::runApp(system.file("~/shiny/app.R", package="visNetwork"))
# A shiny example
shiny::runApp("~/shiny/app.R")
# A shiny example
shiny::runApp("~/shiny")
# A shiny example
shiny::runApp("./shiny/app.R")
# A shiny example
shiny::runApp("./shiny/app.R")
runApp('shiny')
runApp('shiny')
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
visnet <- visNetwork(vis.nodes, vis.links, width="100%", height = "100%", background="#eeefff",
main="BUA Citizen Science Network", submain="Sustainability and Co.",
footer= "Click on a node to see more information",
highlightEdges = TRUE, clickEvent = TRUE) |> #, height="400px",
#visOptions(highlightNearest = TRUE,  selectedBy = list(variable = "name.sdg", multiple = F))
visnet
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(vis.nodes)
# Read in the data:
#nodes <- read.csv("data/cs_nodes_v3.csv", header=T, sep = ";", fileEncoding = "UTF-16LE")
nodes <- read_excel("data/cs_nodes_Kopie.xlsx")
vis.nodes <- nodes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
save.image("C:/Users/iarkaeva/Documents/R/BIH_QUEST_Projects/cs/interactive_network.RData")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(vis.nodes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(vis.nodes)
View(vis.nodes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?visOptions
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(vis.links)
View(vis.nodes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?visPhysics
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(vis.nodes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
